// quad file
quad()
  : ETEAPOT::BasicTracker()
{
//initialize();
  m_ir = 0.0;
}

quad(const ETEAPOT2::quad& mt) 
  : ETEAPOT::BasicTracker(mt)
{
  copy(mt);
}

~quad()
{
}

UAL::PropagatorNode* clone()
{
  return new ETEAPOT2::quad(*this);
}

void setLatticeElements(const UAL::AcceleratorNode& sequence, 
                                            int is0, 
                                            int is1,
                                            const UAL::AttributeSet& attSet)
{
   ETEAPOT::BasicTracker::setLatticeElements(sequence, is0, is1, attSet);
   const PacLattice& lattice     = (PacLattice&) sequence;
   setLatticeElement(lattice[is0]);
}

void setLatticeElement(const PacLattElement& e)
{
  // length
  // m_l = e.getLength();

  // ir
  m_ir = e.getN();

if(!m_ir){
 std::cerr << "enter quad::void setLatticeElement(const PacLattElement& e) - m_ir = e.getN()- " << m_ir << "\n";
}
else{
 std::cerr << "Complex Elements not allowed!!!\n";
 exit(1);
}

  m_mdata.setLatticeElement(e);

}

void copy(const ETEAPOT2::quad& mt) 
{
  // m_l   = mt.m_l;
  m_ir  = mt.m_ir;

  m_mdata = mt.m_mdata;
}
