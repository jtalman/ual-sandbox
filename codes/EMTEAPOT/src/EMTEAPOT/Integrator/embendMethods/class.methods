// embend file
embend()
  : UAL::PropagatorNode()
{
}

embend(const EMTEAPOT::embend& dt) 
  : UAL::PropagatorNode(dt)
{
  m_data = dt.m_data;
  m_edata = dt.m_edata;

}

~embend()
{
}

embend* clone()
{
  return new embend(*this);
}

void setLatticeElements(const UAL::AcceleratorNode& sequence, 
                                               int is0, 
                                               int is1,
                                               const UAL::AttributeSet& attSet)
{
std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " enter method void EMTEAPOT::embend::setLatticeElements(UAL) is0 is1 " << is0 << " " << is1 << "\n"; 

  if(is0 < sequence.getNodeCount()) m_frontNode = 
                                     *((PacLattElement*) sequence.getNodeAt(is0));
  if(is1 < sequence.getNodeCount()) m_backNode  =   
                                     *((PacLattElement*) sequence.getNodeAt(is1));
   m_i0 = is0;
   m_i1 = is1;

// const PacLattice& lattice     = (PacLattice&) sequence;

// UAL::PropagatorNode::setLatticeElements(sequence, is0, is1, attSet);  
   const PacLattice& lattice     = (PacLattice&) sequence;
const std::type_info& r1 = typeid(lattice);
UAL::AcceleratorNode* ualAn = lattice.getNodeAt(0);
std::cerr << "typeid(type_info).name()     " << typeid(type_info).name()     << "\n";
std::cerr << "r1.name()     " << r1.name()     << "\n";
//std::cerr << "typeid(lattice).name()     " << typeid(lattice).name()     << "\n";
std::cerr << "lattice.getName()     " << lattice.getName()     << "\n";
std::cerr << "lattice.getNodeCount()     " << lattice.getNodeCount()     << "\n";
   setLatticeElement(lattice[is0]);

   m_l = (lattice[is0]).getLength();
   m_n = (lattice[is0]).getLength();

   m_s = lattice[is0].getPosition();
   m_name=lattice[is0].getDesignName();
std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " leave method void EMTEAPOT::embend::setLatticeElements(UAL) is0 is1 " << is0 << " " << is1 << "\n"; 
}

void setLatticeElement(const PacLattElement& e)
{
std::cerr << "\nJDT2018 - File " << __FILE__ << " line " << __LINE__ << " enter method void EMTEAPOT::embend::setLatticeElement(PAC)\n\n";
//std::cout << "e.getName() " << e.getName() << " e.getPosition() " << e.getPosition() << "\n";
  m_data.m_m=EMTEAPOT::embend::m_m;
  m_data.setLatticeElement(e);
  m_edata.setLatticeElement(e);

std::cerr << "                     embend before m_mdata.setLatticeElement(e);\n";
  m_mdata.setLatticeElement(e);
std::cerr << "                     embend after  m_mdata.setLatticeElement(e);\n";
}

const char*  getType()
{
  return "EMTEAPOT::embend";
}

bool isSequence() { return false; }

UAL::AcceleratorNode& getFrontAcceleratorNode()
{
  return m_frontNode;
}

UAL::AcceleratorNode& getBackAcceleratorNode()
{
  return m_backNode;
}
