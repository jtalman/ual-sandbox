#include "algorithm.hh"
//#include <stdio.h>

template<class Coordinate, class Coordinates>
int algorithm<Coordinate, Coordinates>::turn=0;

template<class Coordinate, class Coordinates> 
algorithm<Coordinate, Coordinates>::algorithm()
{
}

template<class Coordinate, class Coordinates>
algorithm<Coordinate, Coordinates>::~algorithm()
{
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::getE(
	int ip,
	const ETEAPOT::DipoleData& data, 
	const ETEAPOT::MltData& edata,
	Coordinates& p, 
	Coordinates& tmp, 
	double v0byc,
	const PAC::BeamAttributes cba)
{
std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " enter template<class Coordinate, class Coordinates>void algorithm<Coordinate, Coordinates>::getE(...\n";
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::passBend(
	int ip,
	const ETEAPOT::DipoleData& data, 
	const ETEAPOT::MltData& edata,
	Coordinates& p, 
	Coordinates& tmp, 
	double v0byc,
	const PAC::BeamAttributes cba,
        int bend)
{
std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " enter template<class Coordinate, class Coordinates> void algorithm<Coordinate, Coordinates>::passBend( ...\n";
#include "getDesignBeam.h"

double Rsxf = data.m_l/data.m_angle;
std::cout << "JDT-Rsxf" << ip << " " << Rsxf << "\n";
 // Simple Element

/*
 if(!data.m_ir){
   traverseSplitBendExactly(ip, p, tmp, v0byc, cba,Rsxf,data.m_angle/2);
   handleSplitBendBoundary(p,cba,Rsxf);       //  should be markSplitBendBoundary?
   splitBendKick(p,cba,Rsxf,data.m_m,data.m_angle);
   makeVelocity(p, tmp, v0byc);	         // common
   traverseSplitBendExactly(ip, p, tmp, v0byc, cba,Rsxf,data.m_angle/2);
   return;
 } 
*/

PAC::Position dummy;
PAC::Position dummy2;
double dummy_v0byc;
getE(ip,data,edata,dummy,dummy2,dummy_v0byc,cba);
char * S[21] = {"ZERO  ","ONE   ","TWO   ","THREE ","FOUR  ","FIVE  ","SIX   ","SEVEN ","EIGHT ","NINE  ","TEN   ","ELEVEN","TWELVE","THIRTN","FORTN ","FIFTN ","SIKTN ","SEVNTN","EGHTN ","NNETN ","TWENTY"};

int totalSplitBends = pow( 2, data.m_ir );
std::cout << "JDT-data.m_ir                    " << data.m_ir       << "\n";
std::cout << "JDT-data.m_angle                 " << data.m_angle    << "\n";
std::cout << "JDT-totalSplitBends              " << totalSplitBends << "\n";
std::cout << "JDT-data.m_angle/totalSplitBends " << data.m_angle/totalSplitBends    << "\n";
for(int i = 0; i < totalSplitBends/2; i++){
 traverseSplitBendExactly(ip, p, tmp, v0byc, cba,Rsxf,data.m_angle/totalSplitBends);

applyThinBendKick(data, edata, 1, dummy, v0byc);

 splitBendKick(p,cba,Rsxf,data.m_m,2*data.m_angle/totalSplitBends);
 traverseSplitBendExactly(ip, p, tmp, v0byc, cba,Rsxf,data.m_angle/totalSplitBends);
#ifndef lngTrmTrk
char buffer [3];
//itoa (ip,buffer,10);
//std::string sip=itoa(ip);
//std::string sip(ip);
sprintf(buffer,"%d",ip);
std::string bip(buffer);
char buffr2 [10];
  sprintf(buffr2,"%+5.2f",data.m_m);
//sprintf(buffr2,"%+f10.1",data.m_m);
std::string bp2(buffr2);
  std::string sip = "out/STT/StndrdPrtcl";
//std::string sip = "out/shortTermTracking/resultsForStandardParticle";
            sip+=bip;
std::cout << "sip.length() " << sip.length() << "\n";
if(sip.length()==20){sip+="_";}
            sip+="_m=";
            sip+=bp2;
fstream filestr;
filestr.open (sip.c_str(), fstream::out | fstream::app);
filestr << setiosflags( ios::showpos    );  
filestr << setiosflags( ios::uppercase  );
filestr << setiosflags( ios::scientific );
//filestr << setw( 11 );
filestr << setfill( ' ' );
filestr << setiosflags( ios::left );
filestr << setprecision(13) ;
filestr << setw(5) << bend << " " << p[0] << " " << p[1] << " " << p[2] << " " << p[3] << " " p[4] << " " << p[5] << " " << S[ip] << "\n";
turn++;
filestr.close();
#endif
}

 return;
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::traverseSplitBendExactly(
  int ip,
  Coordinates& p, 
  Coordinates& tmp,
  double v0byc,
  const PAC::BeamAttributes cba,
  double Rsxf,
  double splitTheta){
  std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " enter template<class Coordinate, class Coordinates> void algorithm<Coordinate, Coordinates>::traverseSplitBendExactly( ...\n";
//std::cout << "TDJ - client side - File " << __FILE__ << " line " << __LINE__ << " enter method template<class Coordinate, class Coordinates> -- void ETEAPOT::algorithm<Coordinate, Coordinates>::traverseSplitBendExactly()\n";

char * S[21] = {"ZERO  ","ONE   ","TWO   ","THREE ","FOUR  ","FIVE  ","SIX   ","SEVEN ","EIGHT ","NINE  ","TEN   ","ELEVEN","TWELVE","THIRTN","FORTN ","FIFTN ","SIKTN ","SEVNTN","EGHTN ","NNETN ","TWENTY"};

#include "getDesignBeam.h"
double GeVperJ    = 1./q0/1.e9;                            // units
double p0         = sqrt(e0*e0-m0*m0);                     // derived beam momentum
double g0         = e0/m0;                                 // derived beam gamma
double b0         = sqrt(1.-1./g0/g0);                     // derived beam beta (usually same as velocity)
       c          = 1;
double v0         = b0/c;                                  // JDT

double L0         = Rsxf*p0;

       k          = p0*v0*Rsxf;                              // moved "upstream" to be available for getPotentialEnergy and PE()
double Eel0       = p0*b0/Rsxf;
double Eel0MKS    = Eel0*1e9;
#ifdef DEBUG
 #include "printDesignBeam.h"
#endif

double rInput     = p[0]+Rsxf;

double gbefi      = (e0+p0*p[5])/m0;                      // "befi" means "before input"
double eVafti     = PE(Rsxf,rInput);                    // "afti" means "after input"
double gafti      = gbefi-eVafti/m0;                      // gamma after input

double th         = splitTheta;                            //    ditto

std::cout << "JDT-gafti" << ip << " " << gafti << "\n";
#include "reference.inline"                                // 2 approaches in play, RT Original, Munoz
std::cout << "JDT - L    " << L    << "\n";
std::cout << "JDT - k    " << k    << "\n";
std::cout << "JDT - EscM " << EscM << "\n";

//     p[0]      += dx85;
       p[0]      += dr;
//std::cout << "JDT-pOf0" << ip << " " << p[0] << " " << S[ip] << "\n";
       p[1]       = pxOutp/p0;
//std::cout << "JDT-pOf1" << ip << " " << p[1] << " " << S[ip] << "\n";

       p[2]       = yOutp;                                 // approximations
//std::cout << "JDT-pOf2" << ip << " " << p[2] << " " << S[ip] << "\n";
       p[3]       = pyOutp/p0;                             //    here
//std::cout << "JDT-pOf3" << ip << " " << p[3] << " " << S[ip] << "\n";

double tof0       = Rsxf*th/b0;
double fac1       = EscM*lambda*lambda/L/kappa/kappa;
double fac2       =    k*C_tilda/L/kappa/kappa;
double time1      = getTime1(fac1,th);                       // get_timeFromFirstTermViaMaple(fac1,th)
double time2      = getTime2(fac2,th);                       // get_timeFromSecondTermViaMaple(fac2,th)
  double tofA     = time1+time2;

       p[4]      += tofA-tof0;                           //
std::cout << "JDT-pOf4" << ip << " " << p[4] << " " << S[ip] << "\n";
std::cout << "JDT - leave traverseSplitBendExactly\n";
std::cout << "____________________________________\n";
std::cout << "____________________________________\n";
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::splitBendKick(Coordinates& p,const PAC::BeamAttributes cba,double Rsxf,double m,double theta){
std::cout << "File " << __FILE__ << " line " << __LINE__ << " enter method template<class Coordinate, class Coordinates> -- void ETEAPOT::algorithm<Coordinate, Coordinates>::splitBendKick()\n";
#include "getDesignBeam.h"
double GeVperJ   = 1./q0/1.e9;                            // units
double p0        = sqrt(e0*e0-m0*m0);                     // derived beam momentum
double g0        = e0/m0;                                 // derived beam gamma
double b0        = sqrt(1.-1./g0/g0);                     // derived beam beta (same as velocity)
//double L0        = p0*Rsxf;
double Eel0      = p0*b0/Rsxf;
double Eel0MKS   = Eel0*1e9;
#ifdef DEBUG
 #include "printDesignBeam.h"
#endif

double inverseFocalLengthX = -(-m+1)*theta/Rsxf;
p[1] += p[0]*inverseFocalLengthX;
//std::cout << "JDT-pOf1" << ip << " " << p[1] << " " << S[ip] << "\n";

double inverseFocalLengthY = -inverseFocalLengthX;
p[3] += p[2]*inverseFocalLengthY;
//std::cout << "JDT-pOf3" << ip << " " << p[3] << " " << S[ip] << "\n";
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::handleSplitBendBoundary(Coordinates& p,const PAC::BeamAttributes cba,double Rsxf){
std::cout << "File " << __FILE__ << " line " << __LINE__ << " enter method template<class Coordinate, class Coordinates> -- void ETEAPOT::algorithm<Coordinate, Coordinates>::handleSplitBendBoundary()\n";
#include "getDesignBeam.h"
double GeVperJ   = 1./q0/1.e9;                            // units
double p0        = sqrt(e0*e0-m0*m0);                     // derived beam momentum
double g0        = e0/m0;                                 // derived beam gamma
double b0        = sqrt(1.-1./g0/g0);                     // derived beam beta (same as velocity)
//double L0        = p0*Rsxf;
double Eel0      = p0*b0/Rsxf;
double Eel0MKS   = Eel0*1e9;
#ifdef DEBUG
 #include "printDesignBeam.h"
#endif
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::passBendSlice(
  const ETEAPOT::ElemSlice& slice, 
  Coordinates& p, 
  Coordinates& tmp,
  double v0byc)
{
std::cout << "File " << __FILE__ << " line " << __LINE__ << " enter method template<class Coordinate, class Coordinates> -- void ETEAPOT::algorithm<Coordinate, Coordinates>::passBendSlice(const ETEAPOT::ElemSlice& slice,Coordinates& p,Coordinates& tmp,double v0byc)\n";
std::cout << "File " << __FILE__ << " line " << __LINE__ << " asin(slice.sphpl()) = " << asin(slice.sphpl()) << "\n";
std::cout << "File " << __FILE__ << " line " << __LINE__ << " acos(slice.cphpl()) = " << acos(slice.cphpl()) << "\n";
std::cout << "File " << __FILE__ << " line " << __LINE__ << " atan(slice.tphpl()) = " << atan(slice.tphpl()) << "\n";

  // From makeVelocity:
  //
  // tmp[x]  = psbyp0
  // tmp[px] = vx/vs
  // tmp[py] = vy/vs

  Coordinate t0, t1, x, y;

  // Transform velocities into frame of multipole

 t0  = ((slice.cphpl())*p[1]);                                       // was : p[PacPosition::PX]*slice.cphpl(); 
 t0 -= ((slice.sphpl())*tmp[0]);  // (px*cos(phi+) - ps*sin(phi+))/p0 // was : tmp[PacPosition::X]*slice.sphpl(); 
 p[1] = t0;

 // Transform coordinates into frame of multipole

 t0  = 1/(1. + ((slice.tphpl())*tmp[1])); // 1/(1+vx/vs*tan(phi+))  // was : 1/(1. + tmp[PacPosition::PX]*slice.tphpl()); 
 t1  = (-slice.scrx()) + p[0];            // x - scrx               // was : p[PacPosition::X] - slice.scrx(); 

 
 if(p.size() > 5) {
   tmp[2] = t0;
   if(slice.rlipl()) deltaPath(slice, p, tmp, v0byc);  // P[5] -= cdt
 }

 x  = t1;
 x += (slice.scrs())*tmp[1];            // (x - scrx + vx/vs*scrs)*   // was :tmp[PacPosition::PX]*slice.scrs(); 
 x = ((1.0/(slice.cphpl()))*t0)*x;      // *t0/cos(phi+) // was :  x *= t0/slice.cphpl(); 
 y  = slice.scrs();
 y -= slice.tphpl()*t1;                 // (scrs - tan(phi+)*(x - scrx))*
 y *= tmp[3]*t0;                        // *vy/vs*t0+
 y += p[2];                             // +y


 p[0] = x;
 p[2] = y;
                              
std::cout << "File " << __FILE__ << " line " << __LINE__ << " leave method template<class Coordinate, class Coordinates> -- void ETEAPOT::algorithm<Coordinate, Coordinates>::passBendSlice(const ETEAPOT::ElemSlice& slice,Coordinates& p,Coordinates& tmp,double v0byc)\n";
 return;
}

template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::deltaPath(
  const ETEAPOT::ElemSlice& slice, 
  Coordinates& p, 
  Coordinates& tmp,
  double v0byc)
{
  Coordinate rvbyc, p0, p1, p3, p2, p4;

  // From passBend:
  // 
  // tmp[x]  = psbyp0
  // tmp[y]  = 1/(1+vx/vs*tan(phi+))
  // tmp[px] = vx/vs
  // tmp[py] = vy/vs
  // tmp[ct] = dV

  // L = sqrt(dx*dx + dy*dy + ds*ds)

  p0  = (p[0] + (slice.spxt())*tmp[1]);          // was :  (p[PacPosition::X] + tmp[PacPosition::PX]*slice.spxt()); 
  p0 *= tmp[2];                                  // (x + vx/vs*spxt)*tmp[y]  
  p1  = p0 - p[0];                               // dx
  p0  = (slice.tphpl())*((-slice.scrx()) + p0 ); // (t0 - scrx)*tan(phi+)   // was :(p0 - slice.scrx())*slice.tphpl(); 
  p3  = slice.scrs() - p0;                       // ds
  p2  = tmp[3]*p3;                               // dy

  p4  = 0;                                                    // L*L
  p1 *= p1;
  p2 *= p2;
  p3 *= p3;
  p4  = p1 + p2 + p3;
  p4  = sqrt(p4);                                             // L
  p4 += slice.rlipl();                                        // L + Lo


  // p[5] = cdt = L/(v/c) - Lo/(vo/c) = (L - Lo)/(v/c) + Lo*(c/v -c/vo) =
  //                                  =  cdt_circ      + cdt_vel


  // cdt_circ = (c/v)(L - Lo) = (c/v)(L**2 - Lo**2)/(L + Lo)  

/*
  rvbyc = v0byc*(1. + tmp[4]);
  rvbyc = 1./rvbyc;
*/

  rvbyc = tmp[5];

  p1  = p1 + p2 + p0*p0;
  p1 -= slice.scrx()*slice.scrx();             
  p1 -= (2.*slice.scrs())*p0;                 // L**2 - Lo**2     // was :  2.*p0*slice.scrs() 

  p4 = p1/p4;
  p1  =  p4*rvbyc;                          // cdt_old + cdt_circ 
  
  // cdt_vel  = Lo*(c/v - c/vo)   

  p2  = 1./v0byc;
  p2 -= rvbyc;
  p2 *= slice.rlipl();

  p[4]   -= p1;               // cdt
  p[4]   += p2;               // cdt

  return;
}
	
template<class Coordinate, class Coordinates>
void algorithm<Coordinate, Coordinates>::applyThinBendKick(
  const ETEAPOT::DipoleData& data,
  const ETEAPOT::MltData& edata, double rkicks,
  Coordinates& p, double v0byc)
{
  std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " enter template<class Coordinate, class Coordinates>void algorithm<Coordinate, Coordinates>::applyThinBendKick(...\n";
  Coordinate x, px, y, py;


  PacElemMultipole* mult = edata.m_mlt;
  PacElemOffset* offset = edata.m_offset;

  x = p[0]; //  xdif
  y = p[2]; //  ydif

  px = 0.0;
  py = 0.0;

  if(offset) {
    x -= offset->dx();
    y -= offset->dy();
  }

  double kl1 = 0.0;

  if(mult){
     int order = mult->order();
     if(order > 0) kl1 = mult->kl(1);
  }

  if(data.m_l){

   double rho = data.m_l/data.m_angle;

	// std::cerr << "btw00 = " << data.m_btw00 << ", btw01 = " << data.m_btw01 << endl;
  	px -= x*data.m_btw01;
  	px -= data.m_btw00;

    px += y*y*kl1*rkicks/rho/2.0;  // K.Brown

  	py += y*data.m_atw01;
  	py += data.m_atw00;
  }
  else {
	// MAD thin dipole
        double factor = data.m_angle/v0byc;
        px += factor*p[5];
        p[4] -= factor*p[0];
  }

  p[1] += px;                              // px/p0
  p[3] += py;                              // py/p0

std::cout << "File " << __FILE__ << " line " << __LINE__ << " px " << px << "\n";
std::cout << "File " << __FILE__ << " line " << __LINE__ << " py " << py << "\n";
  std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " leave template<class Coordinate, class Coordinates>void algorithm<Coordinate, Coordinates>::applyThinBendKick(...\n";
}
