std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " timeOfFlightBend\n";

double thetaTot   = 0;

double qD         = UAL::elemCharge;
//double GeVperJ    = 1./qD/1.e9;

double pDc        = p0;
double eD         = e0;
double mpcsq      = UAL::pmass;

double gam_in_m   = (eD + pDc * p[5]) / mpcsq;
double Escr       = gam_in_m * mpcsq;
//double pcsq_in_m  = Escr-mpcsq*mpcsq;
double gammaD     = e0/m0;
double Escr0      = mpcsq/gammaD+k/Rsxf;
double EscrD      = Escr0;
double pcsq_in_m  = (Escr + mpcsq) * (Escr - mpcsq);   //   Escr*Escr - mpcsq*mpcsq;
double pczsq_in_m = pcsq_in_m/(1. + p[1]*p[1]);
double pcz_in_m   = sqrt(pczsq_in_m);
double pcx_in_m   = p[1] * sqrt(pczsq_in_m);    // Implicit approximation:  rIn - Rsxf is the same as x[0]
double x_in       = p[0];
double xp_in_m    = p[1];

std::cout << "thetaTot     " << thetaTot << "\n";
std::cout << "Escr         " << Escr << "\n";
std::cout << "pcsq_in_m    " << pcsq_in_m << "\n";
std::cout << "gammaD       " << gammaD << "\n";
std::cout << "gam_in_m     " << gam_in_m << "\n";
std::cout << "kappa0(Q)    " << kappa0 << "\n";
std::cout << "pDc          " << pDc << "\n";
std::cout << "eD           " << eD << "\n";
std::cout << "mpcsq        " << mpcsq << "\n";
std::cout << "gam_in_m     " << gam_in_m << "\n";
std::cout << "Escr         " << Escr << "\n";
std::cout << "Escr*Escr    " << Escr*Escr << "\n";
std::cout << "EscM         " << EscM << "\n";
std::cout << "pcsq_in_m    " << pcsq_in_m << "\n";
std::cout << "pczsq_in_m   " << pczsq_in_m << "\n";
std::cout << "pcz_in_m     " << pcz_in_m << "\n";
std::cout << "pcx_in_m     " << pcx_in_m << "\n";
std::cout << "x_in         " << x_in << "\n";
std::cout << "xp_in_m      " << xp_in_m << "\n";

std::cout << "Eel0         " << Eel0 << "\n";
std::cout << "El0          " << El0 << "\n";
std::cout << "E0           " << E0 << "\n";
std::cout << "k            " << k << "\n";
std::cout << "E0*Rsxf*Rsxf " << E0*Rsxf*Rsxf << "\n";

double EFD        = Eel0;

double xi_in      = x_in/(Rsxf + x_in);
double V_in_p     = EFD * Rsxf * xi_in;   //   x_in/(Rsxf + x_in);   // migrate to xi
double pcsq_in_p  = (Escr - V_in_p) * (Escr - V_in_p) - mpcsq * mpcsq;
double pczsq_in_p = pcsq_in_p - pcx_in_m * pcx_in_m;
double x_in_p     = x_in;
double xp_in_p    = pcx_in_m/sqrt(pczsq_in_p);
double xip_in     = Rsxf*Rsxf*xp_in_p/(Rsxf + x_in)/(Rsxf + x_in);

std::cout << "Design E Fld " << EFD << "\n";
std::cout << "V_in_p       " << V_in_p << "\n";
std::cout << "pcsq_in_p    " << pcsq_in_p << "\n";
std::cout << "pczsq_in_p   " << pczsq_in_p << "\n";
std::cout << "x_in_p       " << x_in_p << "\n";
std::cout << "xp_in_p      " << xp_in_p << "\n";

//double Ly_in_m    = Ly;
  double Ly_in_m    = -(Rsxf+x_in)*pcz_in_m;
double Lysq_in_m  = Ly_in_m*Ly_in_m;
double Lysq_in_p  = Lysq_in_m*pczsq_in_p/pczsq_in_m;
double Ly_in_p    = -sqrt(Lysq_in_p);

double LD         = L0;
double bD         = b0;
//double EscrD      = Escr0;
double Q          = sqrt(1.-LD*LD*bD*bD/Ly_in_p/Ly_in_p);
double xi_co_Fac  = 1.-LD*LD*Escr/Ly_in_p/Ly_in_p/EscrD;
double xi_co      = xi_co_Fac/Q/Q;

std::cout << "xi_in        " << xi_in << "\n";
std::cout << "xip_in       " << xip_in << "\n";
std::cout << "LD           " << LD << "\n";
std::cout << "Ly_in_m      " << Ly_in_m << "\n";
std::cout << "Lysq_in_m    " << Lysq_in_m << "\n";
std::cout << "Lysq_in_p    " << Lysq_in_p << "\n";
std::cout << "Ly_in_p      " << Ly_in_p << "\n";
std::cout << "Escr         " << Escr << "\n";
std::cout << "EscrD        " << EscrD << "\n";
std::cout << "kappa0(Q)    " << kappa0 << "\n";
std::cout << "Q            " << Q << "\n";
std::cout << "xi_co_Fac    " << xi_co_Fac << "\n";
std::cout << "xi_co        " << xi_co << "\n";

{
 double rD         = Rsxf;
 double a          = xi_co;
 double c          = xi_in - xi_co;
 double s          = xip_in/Q;

 double pwrSrsFac  = rD/bD;
 double TOFD       = pwrSrsFac*th;

 double EscrBye    = Escr;
 double LycBye     = Ly_in_p;

 double A0         = -rD*rD*EscrBye/LycBye-rD/bD;
 double A1         = -2.*rD*rD*EscrBye/LycBye + rD*rD*rD*E0/LycBye;
 double A2         = -3.*rD*rD*EscrBye/LycBye + 2.*rD*rD*rD*E0/LycBye;

 double ntgrlXiTo0 = th;
 double ntgrlXiTo1 = a*th + c*sin(Q*th)/Q + s*(1.-cos(Q*th))/Q;
 double ntgrlXiTo2 = a*a*th + 2.*a*c*sin(Q*th)/Q + 2.*a*s*(1.-cos(Q*th))/Q + c*c*(th/2. + sin(2.*Q*th)/4./Q) + 2.*c*s*(1.-cos(2.*Q*th))/4./Q + s*s*(th/2. - sin(2.*Q*th)/4./Q);

 double tofDev0    = A0*ntgrlXiTo0;
 double tofDev1    = A1*ntgrlXiTo1;
 double tofDev2    = A2*ntgrlXiTo2;

 double tofDevTOT  = tofDev0+tofDev1+tofDev2;

 std::cout << "rD           " << rD << "\n";
 std::cout << "bD           " << bD << "\n";

 std::cout << "a            " << a << "\n";
 std::cout << "c            " << c << "\n";
 std::cout << "s            " << s << "\n";

 std::cout << "pwrSrsFac    " << pwrSrsFac << "\n";
 std::cout << "TOFD         " << TOFD << "\n";
 std::cout << "EscrBye      " << EscrBye << "\n";
 std::cout << "LycBye       " << LycBye << "\n";
 std::cout << "E0           " << E0 << "\n";

 std::cout << "A0           " << A0 << "\n";
 std::cout << "A1           " << A1 << "\n";
 std::cout << "A2           " << A2 << "\n";

 std::cout << "tofDev0      " << tofDev0 << "\n";
 std::cout << "tofDev1      " << tofDev1 << "\n";
 std::cout << "tofDev2      " << tofDev2 << "\n";
 std::cout << "tofDevTOT    " << tofDevTOT << "\n";
}

thetaTot = thetaTot + th;
std::cout << "thetaTot     " << thetaTot << "\n";

std::cout << "JDT - server side - File " << __FILE__ << " line " << __LINE__ << " leave timeOfFlightBend\n";
