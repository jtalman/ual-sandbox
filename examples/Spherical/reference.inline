#define GAMMA_FROZEN_SPIN 1.248107349

//                   constants
  double m_p = UAL::pmass;                    // GeV  
//double m_p = 0.93827231;                    // GeV  
  double c = 1;                               // 2.99792458e8 m/s
  double gamma_0 = GAMMA_FROZEN_SPIN;         //      
  double beta_0 = sqrt(1-1/gamma_0/gamma_0);  //
  double p_0c = gamma_0*m_p*beta_0;           // GeV  
//double p_0c = 0.7007405278;                 // GeV  
//double R0_= 30;                             //      
//double R0_= 40;                             //      
         k = R0*p_0c*beta_0;                  //      
//double k = 16.77233867;                     //      
//                   constants

//                   probe deviations
double  dx  =  0.01;             // main input
double  dy  =  0.0;
double  dz  =  0.0;
double dpx  =  0.0;
double dpy  =  0.0;
double dpz;                      // main ouput
//                   probe deviations

//                   Case I: dx and implied dE
  double r = R0+dx;                           //      
  double gamma = gamma_0;                     //      
         E = gamma*m_p*c*c-k/r;               //      
  double L = r*p_0c;                          //      
//                   Case I: dx and implied dE

//                   probe values
double x  = R0+dx; 
double y  = dy;
double z  = dz;

double px = dpx;
double py = dpy;
double pz;

double vin;
double pin;

vin = sqrt(1-1/gamma/gamma);
pin = gamma*m_p*vin;
std::cout << "vin " << vin  << "\n";
std::cout << "pin " << pin << "\n";

pz = sqrt(pin*pin-px*px-py*py);
std::cout << "pz " << pz << "\n";

double Lx = y*pz-z*py;
double Ly = z*px-x*pz;
double Lz = x*py-y*px;
       L_ = sqrt(Lx*Lx+Ly*Ly+Lz*Lz);

std::cout << "Lx  " << Lx << "\n";
std::cout << "Ly  " << Ly << "\n";
std::cout << "Lz  " << Lz << "\n";
std::cout << "L_  " << L_ << "\n";
//                   probe values

#include "hamilton.inline"
#include "plane.inline"
