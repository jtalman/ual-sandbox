Unified Accelerator Library (UAL).


The UAL 1.0 are designed as a customizable and extendable environment for
developing diverse accelerator applications. Its main architectural
principle is a separation of physical entities and mathematical
abstractions from algorithms. The accelerator algorithms are implemented
as classes that share data via Common Accelerator Objects (Element,
Bunch, Twiss, etc.). This highly flexible structure has facilitated
selecting and implementing more appropriate software design patterns and
accelerator approaches, supporting project-specific requirements. At
this time, the UAL joins several object-oriented programs: PAC (Platform for
Accelerator Codes), TEAPOT (Thin Element Program for Optics and Tracking),
ZLIB (Numerical Library for Differential Algebra), ACCSIM (Accumulator
Simulation Code), ORBIT (Objective Ring Beam Injection and Tracking Code),
and ALE (Accelerator Library Extensions). Modules that are partially
supported and are under active development are ICE (Incoherent and Coherent
Effects), AIM (Accelerator Instrumentation Module), SPINK (SPIN traKer),
and TIBETAN. The Application Programming Interface (API), written in Perl,
provides a universal shell for integrating and managing all project extensions.


---------------------------------------------------------------------------
Organization
---------------------------------------------------------------------------

The UAL 1.0 environment includes the following directories:

./codes - shared C++ libraries and Perl packages of the following accelerator
          codes:
          ACCSIM - Accelerator Simulation code (6D Beam distributions);
	  DA     - DA Runge-Kutta and Lie integrators
	  PAC    - Platform for Accelerator Codes (collection of accelerator
                   common objects, such Element, Bunch, Twiss, etc.);
	  SPINK  - SPINK traKer (under development)
	  TEAPOT - Thin-Element Accelerator Program for Optics and Tracking
                   (collection of tracking, analysis, and correction algorithms);
	  UAL    - UAL Element-Algorithm-Probe framework
     	  ZLIB   - Numerical Library for Differential Algebra;

./doc -   Application Programming Interface (API) generated by Doxygen

./env -   configuration files for solaris and linux systems.

./examples - (incomplete) list of examples illustrating different features
	  of the UAL environment

./ext -   extensions of accelerator codes:
          PAC    - parser of the MAD files.
	  SXF    - SXF-based builder of the UAL Standard Machine Format (SMF)
          ALE    - user-friendly interface (facade) to the UAL environment

./tools - collection of supporting libraries:
          shortmpi - simplified Perl interface to MPICH library
	  src/gperf-2.7.2 - GNU perfect hash generator
	  sxf -   package containing the Standard eXchange Format (SXF)
	  front end for translating SXF files into different accelerator
	  input formats or data structures.

--------------------------------------------------------------------------
Installation
--------------------------------------------------------------------------

At this time, the Linux operating system is a primary development environment
of the UAL software. Then the UAL installation on Red Hat 7.3 can be done in
a few steps:

1. place the source code into the ual1 directory
2. cd ual1
3. setenv UAL <full path to this directory>
4. setenv UAL_ARCH linux
5. optional (only for MPI-based parallel extensions)
	setenv UAL_MPI_C <full path to the mpich directory>
	set path = ($UAL_MPI_C/bin $path)
	setenv LD_LIBRARY_PATH $UAL_MPI_C/lib/shared:$LD_LIBRARY_PATH
6. source setup-linux-ual
7. make >& make.log





