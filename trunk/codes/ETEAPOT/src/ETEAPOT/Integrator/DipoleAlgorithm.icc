// Library       : TEAPOT
// File          : TEAPOT/Integrator/DipoleAlgorithm.icc
// Copyright     : see Copyright file
// Author        : L.Schachinger and R.Talman
// C++ version   : N.Malitsky 

#include "ETEAPOT/Integrator/DipoleAlgorithm.hh"

template<class Coordinate, class Coordinates> 
TEAPOT::DipoleAlgorithm<Coordinate, Coordinates>::DipoleAlgorithm()
{
}

template<class Coordinate, class Coordinates>
TEAPOT::DipoleAlgorithm<Coordinate, Coordinates>::~DipoleAlgorithm()
{
}

template<class Coordinate, class Coordinates>
void TEAPOT::DipoleAlgorithm<Coordinate, Coordinates>::passBend(
	const TEAPOT::DipoleData& data, 
	const TEAPOT::MagnetData& mdata, 	
	Coordinates& p, 
	Coordinates& tmp, 
	double v0byc)
{
 // Simple Element

 if(!data.m_ir){
   passBendSlice(data.m_slices[0], p, tmp, v0byc);
   applyMltKick(mdata, 1, p); 
   applyThinBendKick(data, mdata, 1, p, v0byc);
   makeVelocity(p, tmp, v0byc);	
   passBendSlice(data.m_slices[1], p, tmp, v0byc);
   return;
 } 

 // Complex Element

 double rIr = 1./data.m_ir;
 double rkicks = 0.25*rIr;

 int counter = -1;
 for(int i = 0; i < data.m_ir; i++){
   for(int is = 1; is < 5; is++){
     counter++;
     passBendSlice(data.m_slices[counter], p, tmp, v0byc);
     applyMltKick(mdata, rkicks, p); 
     applyThinBendKick(data, mdata, rkicks, p, v0byc);
     makeVelocity(p, tmp, v0byc);	
   }
   counter++;
   passBendSlice(data.m_slices[counter], p, tmp, v0byc);
   makeVelocity(p, tmp, v0byc);
 }

 return;
}

template<class Coordinate, class Coordinates>
void TEAPOT::DipoleAlgorithm<Coordinate, Coordinates>::passBendSlice(
  const TEAPOT::ElemSlice& slice, 
  Coordinates& p, 
  Coordinates& tmp,
  double v0byc)
{
  // From makeVelocity:
  //
  // tmp[x]  = psbyp0
  // tmp[px] = vx/vs
  // tmp[py] = vy/vs

  Coordinate t0, t1, x, y;

  // Transform velocities into frame of multipole

 t0  = ((slice.cphpl())*p[1]);                                       // was : p[PacPosition::PX]*slice.cphpl(); 
 t0 -= ((slice.sphpl())*tmp[0]);  // (px*cos(phi+) - ps*sin(phi+))/p0 // was : tmp[PacPosition::X]*slice.sphpl(); 
 p[1] = t0;

 // Transform coordinates into frame of multipole

 t0  = 1/(1. + ((slice.tphpl())*tmp[1])); // 1/(1+vx/vs*tan(phi+))  // was : 1/(1. + tmp[PacPosition::PX]*slice.tphpl()); 
 t1  = (-slice.scrx()) + p[0];            // x - scrx               // was : p[PacPosition::X] - slice.scrx(); 

 
 if(p.size() > 5) {
   tmp[2] = t0;
   if(slice.rlipl()) deltaPath(slice, p, tmp, v0byc);  // P[5] -= cdt
 }

 x  = t1;
 x += (slice.scrs())*tmp[1];            // (x - scrx + vx/vs*scrs)*   // was :tmp[PacPosition::PX]*slice.scrs(); 
 x = ((1.0/(slice.cphpl()))*t0)*x;      // *t0/cos(phi+) // was :  x *= t0/slice.cphpl(); 
 y  = slice.scrs();
 y -= slice.tphpl()*t1;                 // (scrs - tan(phi+)*(x - scrx))*
 y *= tmp[3]*t0;                        // *vy/vs*t0+
 y += p[2];                             // +y


 p[0] = x;
 p[2] = y;
                              
 return;
}

template<class Coordinate, class Coordinates>
void TEAPOT::DipoleAlgorithm<Coordinate, Coordinates>::deltaPath(
  const TEAPOT::ElemSlice& slice, 
  Coordinates& p, 
  Coordinates& tmp,
  double v0byc)
{
  Coordinate rvbyc, p0, p1, p3, p2, p4;

  // From passBend:
  // 
  // tmp[x]  = psbyp0
  // tmp[y]  = 1/(1+vx/vs*tan(phi+))
  // tmp[px] = vx/vs
  // tmp[py] = vy/vs
  // tmp[ct] = dV

  // L = sqrt(dx*dx + dy*dy + ds*ds)

  p0  = (p[0] + (slice.spxt())*tmp[1]);          // was :  (p[PacPosition::X] + tmp[PacPosition::PX]*slice.spxt()); 
  p0 *= tmp[2];                                  // (x + vx/vs*spxt)*tmp[y]  
  p1  = p0 - p[0];                               // dx
  p0  = (slice.tphpl())*((-slice.scrx()) + p0 ); // (t0 - scrx)*tan(phi+)   // was :(p0 - slice.scrx())*slice.tphpl(); 
  p3  = slice.scrs() - p0;                       // ds
  p2  = tmp[3]*p3;                               // dy

  p4  = 0;                                                    // L*L
  p1 *= p1;
  p2 *= p2;
  p3 *= p3;
  p4  = p1 + p2 + p3;
  p4  = sqrt(p4);                                             // L
  p4 += slice.rlipl();                                        // L + Lo


  // p[5] = cdt = L/(v/c) - Lo/(vo/c) = (L - Lo)/(v/c) + Lo*(c/v -c/vo) =
  //                                  =  cdt_circ      + cdt_vel


  // cdt_circ = (c/v)(L - Lo) = (c/v)(L**2 - Lo**2)/(L + Lo)  

/*
  rvbyc = v0byc*(1. + tmp[4]);
  rvbyc = 1./rvbyc;
*/

  rvbyc = tmp[5];

  p1  = p1 + p2 + p0*p0;
  p1 -= slice.scrx()*slice.scrx();             
  p1 -= (2.*slice.scrs())*p0;                 // L**2 - Lo**2     // was :  2.*p0*slice.scrs() 

  p4 = p1/p4;
  p1  =  p4*rvbyc;                          // cdt_old + cdt_circ 
  
  // cdt_vel  = Lo*(c/v - c/vo)   

  p2  = 1./v0byc;
  p2 -= rvbyc;
  p2 *= slice.rlipl();

  p[4]   -= p1;               // cdt
  p[4]   += p2;               // cdt

  return;
}
	
template<class Coordinate, class Coordinates>
void TEAPOT::DipoleAlgorithm<Coordinate, Coordinates>::applyThinBendKick(
  const TEAPOT::DipoleData& data,
  const TEAPOT::MagnetData& mdata, double rkicks,
  Coordinates& p, double v0byc)
{
  Coordinate x, px, y, py;


  PacElemMultipole* mult = mdata.m_mlt;
  PacElemOffset* offset = mdata.m_offset;

  x = p[0]; //  xdif
  y = p[2]; //  ydif

  px = 0.0;
  py = 0.0;

  if(offset) {
    x -= offset->dx();
    y -= offset->dy();
  }

  double kl1 = 0.0;

  if(mult){
     int order = mult->order();
     if(order > 0) kl1 = mult->kl(1);
  }

  if(data.m_l){

   double rho = data.m_l/data.m_angle;

	// std::cerr << "btw00 = " << data.m_btw00 << ", btw01 = " << data.m_btw01 << endl;
  	px -= x*data.m_btw01;
  	px -= data.m_btw00;

    px += y*y*kl1*rkicks/rho/2.0;  // K.Brown

  	py += y*data.m_atw01;
  	py += data.m_atw00;
  }
  else {
	// MAD thin dipole
        double factor = data.m_angle/v0byc;
        px += factor*p[5];
        p[4] -= factor*p[0];
  }

  p[1] += px;                              // px/p0
  p[3] += py;                              // py/p0


}


