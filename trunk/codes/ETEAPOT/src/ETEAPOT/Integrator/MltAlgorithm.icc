// Library       : ETEAPOT
// File          : ETEAPOT/Integrator/MltAlgorithm.icc
// Copyright     : see Copyright file


#include "ETEAPOT/Integrator/MltAlgorithm.hh"

template<class Coordinate, class Coordinates> 
ETEAPOT::MltAlgorithm<Coordinate, Coordinates>::MltAlgorithm()
{
}

template<class Coordinate, class Coordinates>
ETEAPOT::MltAlgorithm<Coordinate, Coordinates>::~MltAlgorithm()
{
}

template<class Coordinate, class Coordinates>
void ETEAPOT::MltAlgorithm<Coordinate, Coordinates>::passEntry(
	const ETEAPOT::MltData& data,
	Coordinates& p)
{
  if(data.m_entryMlt) applyMltKick(data.m_entryMlt, 0, 1, p);
}

template<class Coordinate, class Coordinates>
void ETEAPOT::MltAlgorithm<Coordinate, Coordinates>::passExit(
	const ETEAPOT::MltData& data,
	Coordinates& p)
{
  if(data.m_exitMlt) applyMltKick(data.m_exitMlt, 0, 1, p);
}

template<class Coordinate, class Coordinates>
void ETEAPOT::MltAlgorithm<Coordinate, Coordinates>::applyMltKick(
	const ETEAPOT::MltData& data,
	double rkicks, 
	Coordinates& p)
{
  applyMltKick(data.m_mlt, data.m_offset, rkicks, p);
}

template<class Coordinate, class Coordinates>
void ETEAPOT::MltAlgorithm<Coordinate, Coordinates>::applyMltKick(
	PacElemMultipole* mult, PacElemOffset* offset,
	double rkicks, 
	Coordinates& p)
{

  if(mult == 0) return;

  Coordinate t0, x, y, px, py;

  x = p[0]; //  xdif
  y = p[2]; //  ydif

  px = 0.0;
  py = 0.0;

  if(offset) {
    x -= offset->dx();
    y -= offset->dy();
  }

  if(mult){

     int     index = mult->size();
     double* data = mult->data();

     double kl, ktl;	

     if(index > 0){
    	  do {
	  	ktl = data[--index];
	 	kl  = data[--index];
          	t0  = x*px;
          	t0 -= y*py - kl;
          	py  = x*py;
          	py += y*px + ktl;    
          	px  = t0;
       	  } while ( index > 0 ) ;
     }
     px *= rkicks;
     py *= rkicks;
  }

  px *= -1;

  p[1] += px;                              // px/p0
  p[3] += py;                              // py/p0	
}
