// bend file
void refractIn(int ip){                                       // Bend method
                                                              // Pure "0 transverse force" kinematics
                                                              // With 1 call to Munoz PE
                                                              // (doesn't use xi for V)
 PAC::Position& p  = *pacPmy;
 e                 = eD + pDc * p[5];
 double pcsq_in_m  = (e + mDcc) * (e - mDcc);
 double pczsq_in_m = pcsq_in_m/( 1. + p[1]*p[1] + p[3]*p[3] );
 double pcz_in_m   = sqrt(pczsq_in_m);
 double pcx_in_m   = p[1] * sqrt(pczsq_in_m);                   // Implicit Approximation:  rIn - rD is the same as x[0]
 double pcy_in_m   = p[3] * sqrt(pczsq_in_m);

 double x_in       = p[0];
 double xp_in_m    = p[1];
 rIn               = get_rFromProbe(rD+p[0],p[2],0);      // p[0]+rD;                                   // Approximation

//double V_in_p     = ED * rD * x_in/(rD + x_in);               // xi
  double eVafti     = PE(rD,rIn);
//std::cerr << "V_in_p " << V_in_p << " eVafti " << eVafti << "\n";

  double pcsq_in_p  = (e - eVafti) * (e - eVafti) - mDcc * mDcc;
//double pcsq_in_p  = (e - V_in_p) * (e - V_in_p) - mDcc * mDcc;
 double pczsq_in_p = pcsq_in_p - pcx_in_m * pcx_in_m;
 double x_in_p     = x_in;
 double xp_in_p    = pcx_in_m/sqrt(pczsq_in_p);
 p[1]              = xp_in_p;
 double pcx_in_p   = p[1] * sqrt(pczsq_in_p);

 double y_in       = p[2];
 double yp_in_m    = p[3];
 double y_in_p     = y_in;
 double yp_in_p    = pcy_in_m/sqrt(pczsq_in_p);
 p[3]              = yp_in_p;
 double pcy_in_p   = p[3] * sqrt(pczsq_in_p);

//#include"ETEAPOT2/Integrator/bendMethods/updateLhardEdge"
}
