// Library       : ETEAPOT
// File          : ETEAPOT/Integrator/DriftAlgorithm.icc
// Copyright     : see Copyright file


#include "ETEAPOT/Integrator/DriftAlgorithm.hh"

template<class Coordinate, class Coordinates> 
ETEAPOT::DriftAlgorithm<Coordinate, Coordinates>::DriftAlgorithm()
{
}

template<class Coordinate, class Coordinates>
ETEAPOT::DriftAlgorithm<Coordinate, Coordinates>::~DriftAlgorithm()
{
}

template<class Coordinate, class Coordinates>
void ETEAPOT::DriftAlgorithm<Coordinate, Coordinates>::passDriftPlusPostProcess(
  int ip,
  double rlipl, 
  Coordinates& p,  
  Coordinates& tmp, 
  double v0byc,
  double m_m,
  int drft)
{
  Coordinate rvbyc, p1, p2, p4; 

  // Transform coordinates into frame of multipole

  p[0] += (rlipl*tmp[1]); // was :tmp[PacPosition::PX]*rlipl;    
  p[2] += (rlipl*tmp[3]); // was :tmp[PacPosition::PY]*rlipl; 


  if(p.size() > 5){ 

    // -p[5] = cdt = L/(v/c) -Lo/(vo/c) = (L - Lo)/(v/c) + Lo*(c/v - c/vo) =
    //                                  = cdt_circ       + cdt_vel

    // 1. cdt_circ = (c/v)(L - Lo) = (c/v)(L**2 - Lo**2)/(L + Lo) ~ 

/*
    rvbyc  = v0byc*(1.+ tmp[PacPosition::CT]);  
    rvbyc  = 1./rvbyc;                                // c/v 
*/

    rvbyc  = tmp[5];                     // c/v 

    p1  = tmp[1];
    p1 *= p1; 
    p2  = tmp[3];
    p2 *= p2; 
    p1 += p2; 

    // Define L + Lo instead of 2*Lo (April 98) 
    p4  = 1.; 
    p4 += p1; 
    p4  = sqrt(p4);                                    // L/Lo
    p4 += 1.;                                          // (L+Lo)/Lo
    p4 /= 2.; 

    p1 /= p4; 

    p1 *= rvbyc;
    p1 *= rlipl/2.;

    // 2. cdt_vel  = Lo*(c/v -c/vo) 
 
    p2  =  1./v0byc;
    p2 -=  rvbyc;
    p2 *=  rlipl;

    // Total

    p[4] -= p1; 
    p[4] += p2; 

  }

char * S[21] = {"ZERO  ","ONE   ","TWO   ","THREE ","FOUR  ","FIVE  ","SIX   ","SEVEN ","EIGHT ","NINE  ","TEN   ","ELEVEN","TWELVE","THIRTN","FORTN ","FIFTN ","SIKTN ","SEVNTN","EGHTN ","NNETN ","TWENTY"};
//int ip=1;

#ifndef lngTrmTrk
char buffer [3];
sprintf(buffer,"%d",ip);
std::string bip(buffer);
char buffr2 [10];
  sprintf(buffr2,"%+5.2f",m_m);
//sprintf(buffr2,"%+5.2f",+9.99);
//sprintf(buffr2,"%+5.2f",+1.00);
//sprintf(buffr2,"%+5.2f",data.m_m);
std::string bp2(buffr2);
  std::string sip = "out/TWISS/StndrdPrtcl";
//std::string sip = "out/STT/StndrdPrtcl";
//std::string sip = "out/shortTermTracking/resultsForStandardParticle";
            sip+=bip;
std::cout << "sip.length() " << sip.length() << "\n";
/*
if(sip.length()==22){sip+="_";}
            sip+="_m=";
            sip+=bp2;
*/
fstream filestr;
filestr.open (sip.c_str(), fstream::out | fstream::app);
filestr << setiosflags( ios::showpos    );  
filestr << setiosflags( ios::uppercase  );  
filestr << setiosflags( ios::scientific );
//filestr << setw( 11 );
filestr << setfill( ' ' );
filestr << setiosflags( ios::left );
filestr << setprecision(13) ;
//filestr << "drft" << setw(5) << drft << " " << p[0] << " " << p[1] << " " << p[2] << " " << p[3] << " " << p[4] << " " << p[5] << " " << S[ip] << "\n";
//turn++;
filestr.close();
#endif

  return;
}

