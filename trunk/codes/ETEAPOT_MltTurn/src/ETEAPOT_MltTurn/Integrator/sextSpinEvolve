//std::cerr << "enter quadSpinEvolve\n";

double* data = mult->data();
/*
std::cerr << "data[0] = " << data[0] << "\n";
std::cerr << "data[1] = " << data[1] << "\n";
std::cerr << "data[2] = " << data[2] << "\n";
std::cerr << "data[3] = " << data[3] << "\n";
std::cerr << "data[4] = " << data[4] << "\n";
std::cerr << "data[5] = " << data[5] << "\n";
*/

double kl = data[4];
double S  = kl;

#include "ETEAPOT_MltTurn/Integrator/getDesignBeam.h"

double GeVperJ    = 1./qD/1.e9;                            // units
double pD         = sqrt(eD*eD-mD*mD);                     // derived beam momentum
double gammaD     = eD/mD;                                 // derived beam gamma
double bD         = sqrt(1.-1./gammaD/gammaD);             // derived beam beta (usually same as velocity)
double vD         = bD;                                    // JDT
//double rD         = Rsxf;
//double LD         = rD*pD;

double g = gD;//UAL::pg;                                   // g versus GD versus gD! also gap

//double gammaD = gD;
double gamma  = (eD+pD*p[5])/mD;
double delGam = gamma - gammaD;
/*
std::cerr << "eD " << eD << "\n";
std::cerr << "pD " << pD << "\n";
std::cerr << "mD " << mD << "\n";
std::cerr << "p[5] " << p[5] << "\n";
std::cerr << "gamma " << gamma << "\n";
std::cerr << "gammaD " << gammaD << "\n";
std::cerr << "delGam " << delGam << "\n";
*/

//double delThtTld = 1.;               //    ???

//double delAlphTld = (g/2. - 1. + g/2./gammaD/gammaD) * delGam * delThtTld;

double x0 = x;
double y0 = y;
double phi0 = 2.*atan2(S*y0,S*x0);   // (328)
double rho0 = sqrt(x0*x0 + y0*y0);
double delThtTld = abs(S)/2.*rho0;               //    (325)
double delAlphTld = (g/2. - 1. + g/2./gammaD/gammaD) * delGam * delThtTld;

// above (326)
// below (327) ... stub

double sx = spin[ip][0];
double sy = spin[ip][1];
double sz = spin[ip][2];

double checkNorm = 1. - sx*sx - sy*sy - sz*sz;
/*
std::cerr << "phi0 " << phi0 << "\n";
std::cerr << "x0 " << x0 << "\n";
std::cerr << "y0 " << y0 << "\n";
std::cerr << "rho0 " << rho0 << "\n";
std::cerr << "delThtTld " << delThtTld << "\n";
std::cerr << "delAlphTld " << delAlphTld << "\n";

std::cerr << "sx " << sx << "\n";
std::cerr << "sy " << sy << "\n";
std::cerr << "sz " << sz << "\n";
*/

double csP = cos(phi0);
double snP = sin(phi0);

double csDAf2 = cos(delAlphTld/2.);
double snDAf2 = sin(delAlphTld/2.);

double a11 = -(csP*csP)*snDAf2;   //   -csP*csP*snDAf2;
double a12 = +csP*snDAf2*snP;     //   -csP*snDAf2*snP;
double a13 = -csP*csDAf2;

double a21 = +csP*snDAf2*snP;     //   -csP*snDAf2*snP;
double a22 = -(snP*snP)*snDAf2;   //   -snP*snP*snDAf2;
double a23 = +snP*csDAf2;         //   -snP*csDAf2;

double a31 = +csP*csDAf2;
double a32 = -snP*csDAf2;         //    snP*csDAf2;
double a33 = -snDAf2;

Matrix3 R( a11, a12, a13, a21, a22, a23, a31, a32, a33 );

R = 2.*snDAf2*R;

double sxdev = R[0]*sx +  R[1]*sy + R[2]*sz;
double sydev = R[3]*sx +  R[4]*sy + R[5]*sz;
double szdev = R[6]*sx +  R[7]*sy + R[8]*sz;

spin[ip][0] += sxdev;
spin[ip][1] += sydev;
spin[ip][2] += szdev;

/*
std::cerr << "leave quadSpinEvolve\n";
char dummy;
std::cin >> dummy;
*/
