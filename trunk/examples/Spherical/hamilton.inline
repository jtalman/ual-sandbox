double kbyL_c = k/L_/c;                       // c=1
double kapSQ = 1-kbyL_c*kbyL_c;               //

       lambda = kapSQ*L_*L_*c*c/k/E;          // also (k/E)*(L_cbyk*L_cbyk-1) - Munoz (34)
double L_cbyk = L_*c/k;
double m0byE = m0/E;                      //

double ca1 = m0byE*m0byE*kapSQ;
//double eps = L_cbyk*sqrt(1-ca1);

std::cout << "E                       " << E      << "\n";
std::cout << "m0c^2/E                " << m0byE << "\n";
std::cout << "k                       " << k       << "\n";
std::cout << "L_                      " << L_      << "\n";
std::cout << "k/L_/c                  " << kbyL_c  << "\n";
std::cout << "kappa squared           " << kapSQ  << "\n";
std::cout << "near one                " << ca1    << "\n";

       kappa = sqrt(kapSQ);
double omega = (1-kappa)*L_/gamma/r/r;
std::cout << "omega                   " << omega  << "\n";

double E0 = m0*c*c/g0;
double kappa0 = 1/g0;
double dEbyE = (E-E0)/E;
double dE = E-E0;
double dK = kappa-kappa0;
std::cout << "dE                   " << dE     << "\n";
std::cout << "dK                   " << dK     << "\n";

double ES = E+k/R0;
double h0 = L_/m0/r-k*ES/L_/m0/c/c;
std::cout << "h0  "<< h0   << "\n";
std::cout << "p[1] " << p[1] << "\n";
double epsilon2 = L_cbyk*sqrt( 2*E0*dE+dE*dE-(m0*c*c)*(m0*c*c)*(2*kappa0*dK+dK*dK) );
       epsilon2 = epsilon2/E;
std::cout << "eccentricity (epsilon2) " << epsilon2     << "\n";
double epsilonViah0 = h0*L_*m0*c*c/k/E;
std::cout << "eccentricity (epsilonViah0) - is this dx/R0?   " << epsilonViah0    << "\n";
       epsilon = epsilonViah0;

//double cosKapTh = (lambda/r-1)/epsilon;
//std::cout << "cosKapTh " << cosKapTh     << "\n";
//double KapTh = acos(cosKapTh);
//std::cout << "   KapTh " <<    KapTh     << "\n";

double h0p = -L_*R0*p[1]/m0/r/r;
double theta0 = atan(h0p/kappa/h0);
       theta0 = theta0/kappa;
std::cout << "theta0 " << theta0 << "\n";
double CSQ = h0*h0+(h0p/kappa)*(h0p/kappa);
std::cout << "CSQ    " << CSQ    << "\n";

std::cout << "\n";
std::cout << "###############################\n";
std::cout << "precessing ellipse\n";
std::cout << "r = lambda/(1 + epsilon cos(kappa theta))\n";
std::cout << "lambda                  " << lambda << "\n";
std::cout << "eccentricity (epsilon)  " << epsilon     << "\n";
std::cout << "kappa                   " << kappa     << "\n";
std::cout << "r = lambda/(1 + epsilon cos(kappa theta))\n";
std::cout << "precessing ellipse\n";
std::cout << "###############################\n";
std::cout << "\n";
