#define PI 3.141592653589793

double rinFromEllipse  = get_rFromEllipse(0);
double routFromEllipse = get_rFromEllipse(splitTheta);
double rout = routFromEllipse;
std::cout << "rin            " << rin            << "\n";
std::cout << "rinFromEllipse " << rinFromEllipse << "\n";
std::cout << "rout           " << rout           << "\n";

double nx = -Lx/L;      // normal vector for rotation
double ny = -Ly/L;      //
double nz = -Lz/L;      // basically aligned with y axes

//double rin = r;

double rinhatx = x/rin;
double rinhaty = y/rin;
double rinhatz = z/rin;

double pinhatx = px/pin;
double pinhaty = py/pin;
double pinhatz = pz/pin;

double anglein = acos(rinhatx*pinhatx+rinhaty*pinhaty+rinhatz*pinhatz);
std::cout << "anglein    " << anglein << "\n";
std::cout << "PI/2       " << PI/2    << "\n";
std::cout << "too close  " <<            "\n";

double rincrosnx = rinhaty*nz-rinhatz*ny;
double rincrosny = rinhatz*nx-rinhatx*nz;
double rincrosnz = rinhatx*ny-rinhaty*nx;

double rincrosnDotpinhat = rincrosnx*pinhatx+rincrosny*pinhaty+rincrosnz*pinhatz;
std::cout << "rincrosnDotpinhat " << rincrosnDotpinhat << "\n";
std::cout << "close to 1 " <<            "\n";

double co = cos(th);
double si = sin(th);
double routhatx = co*rinhatx+si*rincrosnx;
double routhaty = co*rinhaty+si*rincrosny;
double routhatz = co*rinhatz+si*rincrosnz;
std::cout << "rinhat:  (" << rinhatx  << "," << rinhaty  << "," << rinhatz  << ")" << "\n";
std::cout << "routhat: (" << routhatx << "," << routhaty << "," << routhatz << ")" << "\n";

double xout = rout*routhatx;
double yout = rout*routhaty;
double zout = rout*routhatz;
std::cout << "rin    : (" << x        << "," << y        << "," << z        << ")" << "\n";
std::cout << "rout   : (" << xout     << "," << yout     << "," << zout     << ")" << "\n";
