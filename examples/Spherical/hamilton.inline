double kbyLc = k/L/c;                       // c=1
double kapSQ = 1-kbyLc*kbyLc;               //

       lambda = kapSQ*L*L*c*c/k/E;          // also (k/E)*(Lcbyk*Lcbyk-1) - Munoz (34)
double Lcbyk = L*c/k;
double m0byE = m0/E;                      //

double ca1 = m0byE*m0byE*kapSQ;
//double eps = Lcbyk*sqrt(1-ca1);

std::cout << "E                       " << E      << "\n";
std::cout << "m0c^2/E                " << m0byE << "\n";
std::cout << "k                       " << k       << "\n";
std::cout << "L                      " << L      << "\n";
std::cout << "k/L/c                  " << kbyLc  << "\n";
std::cout << "kappa squared           " << kapSQ  << "\n";
std::cout << "near one                " << ca1    << "\n";

       kappa = sqrt(kapSQ);
double omega = (1-kappa)*L/gamma/rIn/rIn;
std::cout << "omega                   " << omega  << "\n";

double E0 = m0*c*c/g0;
double kappa0 = 1/g0;
double dEbyE = (E-E0)/E;
double dE = E-E0;
double dK = kappa-kappa0;
std::cout << "dE                   " << dE     << "\n";
std::cout << "dK                   " << dK     << "\n";

double ES  = E+k/R0;
double h0A = L/m0/rIn-k*ES/L/m0/c/c;
       h0  = ht(rIn);
std::cout << "h0A    "<< h0A    << "\n";
std::cout << "_h0(rIn) "<< _h0(rIn) << "\n";
std::cout << "h0     "<< h0     << "\n";
std::cout << "ht(rIn)  "<< ht(rIn)  << "\n";
std::cout << "p[1]   " << p[1]  << "\n";
double epsilon2 = Lcbyk*sqrt( 2*E0*dE+dE*dE-(m0*c*c)*(m0*c*c)*(2*kappa0*dK+dK*dK) );
       epsilon2 = epsilon2/E;
std::cout << "eccentricity (epsilon2) " << epsilon2     << "\n";
double epsilonViah0A = h0A*L*m0*c*c/k/E;
std::cout << "eccentricity (epsilonViah0A) - is this dx/R0?   " << epsilonViah0A    << "\n";
       epsilon = epsilonViah0A;

//double cosKapTh = (lambda/rIn-1)/epsilon;
//std::cout << "cosKapTh " << cosKapTh     << "\n";
//double KapTh = acos(cosKapTh);
//std::cout << "   KapTh " <<    KapTh     << "\n";

double h0pA = -L*R0*p[1]/m0/rIn/rIn;
       h0p  = htp2(p,Rsxf,rIn);
std::cout << "h0pA           "<< h0pA           << "\n";
std::cout << "htp(p,Rsxf,rIn)  "<< htp(p,Rsxf,rIn)  << "\n";
std::cout << "h0p            "<< h0p            << "\n";
double theta0A = atan(h0pA/kappa/h0A);
       theta0A = theta0A/kappa;
       theta0  = _theta0();
std::cout << "theta0A " << theta0A << "\n";
std::cout << "theta0  " << theta0  << "\n";
double CSQA = h0A*h0A+(h0pA/kappa)*(h0pA/kappa);
double CSQ2 = CSQ();
       C    = sqrt(CSQ2);
std::cout << "CSQA " << CSQA << "\n";
std::cout << "CSQ2 " << CSQ2 << "\n";

std::cout << "\n";
std::cout << "###############################\n";
std::cout << "precessing ellipse\n";
std::cout << "r = lambda/(1 + epsilon cos(kappa theta))\n";
std::cout << "lambda                  " << lambda << "\n";
std::cout << "eccentricity (epsilon)  " << epsilon     << "\n";
std::cout << "kappa                   " << kappa     << "\n";
std::cout << "r = lambda/(1 + epsilon cos(kappa theta))\n";
std::cout << "precessing ellipse\n";
std::cout << "###############################\n";
std::cout << "\n";
